#!/usr/bin/env python3
"""
Ejemplo de las nuevas m√©tricas de matem√°ticas discretas implementadas
en el sistema de dificultad avanzado del Sudoku.
"""

from sudoku.advanced_difficulty import AdvancedDifficultySystem
import json

def mostrar_analisis_detallado():
    """Muestra un an√°lisis detallado de las nuevas m√©tricas implementadas"""
    
    print("=" * 80)
    print("DEMOSTRACI√ìN DE NUEVAS M√âTRICAS DE MATEM√ÅTICAS DISCRETAS")
    print("=" * 80)
    
    # Crear sistema de dificultad
    system = AdvancedDifficultySystem()
    
    # Generar diferentes tipos de puzzles
    niveles = ['facil', 'medio', 'dificil']
    
    for nivel in niveles:
        print(f"\n{'='*20} AN√ÅLISIS NIVEL: {nivel.upper()} {'='*20}")
        
        # Generar puzzle
        puzzle, dificultad, metricas = system.generate_advanced_puzzle(nivel)
        
        # Mostrar an√°lisis detallado
        print(f"\nüìä RESUMEN GENERAL:")
        print(f"   Dificultad Final: {dificultad}/10")
        print(f"   Clasificaci√≥n: {metricas['classification']}")
        print(f"   Celdas vac√≠as: {sum(row.count(0) for row in puzzle)}/81")
        
        # Desglose por √°reas matem√°ticas
        breakdown = metricas['difficulty_breakdown']
        
        print(f"\nüßÆ DESGLOSE POR √ÅREAS DE MATEM√ÅTICAS DISCRETAS:")
        print(f"   ‚îú‚îÄ Permutaciones: {breakdown['permutations']:.2f}/10")
        print(f"   ‚îÇ  ‚îî‚îÄ An√°lisis de grupos sim√©tricos S‚ÇÉ")
        print(f"   ‚îú‚îÄ Teor√≠a de Grafos: {breakdown['graph_theory']:.2f}/10")
        print(f"   ‚îÇ  ‚îî‚îÄ Grafo de restricciones, clustering, componentes")
        print(f"   ‚îú‚îÄ Combinatoria: {breakdown['combinatorics']:.2f}/10")
        print(f"   ‚îÇ  ‚îî‚îÄ Inclusi√≥n-exclusi√≥n, coeficientes binomiales")
        print(f"   ‚îî‚îÄ Teor√≠a de Conjuntos: {breakdown['set_theory']:.2f}/10")
        print(f"      ‚îî‚îÄ Intersecciones, uniones, cardinalidad")
        
        # An√°lisis espec√≠fico de conceptos implementados
        print(f"\nüîç CONCEPTOS MATEM√ÅTICOS APLICADOS:")
        
        # 1. Teor√≠a de Grafos
        print(f"   üìà TEOR√çA DE GRAFOS:")
        print(f"      ‚Ä¢ Construcci√≥n del grafo de restricciones G=(V,E)")
        print(f"      ‚Ä¢ C√°lculo de grados de v√©rtices (m√°x. 20 por celda)")
        print(f"      ‚Ä¢ Coeficiente de clustering local")
        print(f"      ‚Ä¢ An√°lisis de componentes conexas")
        print(f"      ‚Ä¢ Densidad del grafo de celdas vac√≠as")
        
        # 2. Combinatoria Avanzada  
        print(f"   üî¢ COMBINATORIA AVANZADA:")
        print(f"      ‚Ä¢ Principio de Inclusi√≥n-Exclusi√≥n: |A‚à™B| = |A|+|B|-|A‚à©B|")
        print(f"      ‚Ä¢ Coeficientes Binomiales: C(n,k) = n!/(k!(n-k)!)")
        print(f"      ‚Ä¢ Entrop√≠a combinatorial: Œ£ log‚ÇÇ(candidatos)")
        print(f"      ‚Ä¢ An√°lisis de restricciones entre regiones")
        
        # 3. Teor√≠a de Conjuntos
        print(f"   üéØ TEOR√çA DE CONJUNTOS:")
        print(f"      ‚Ä¢ √çndice de Jaccard: |A‚à©B|/|A‚à™B|")
        print(f"      ‚Ä¢ An√°lisis de intersecciones entre candidatos")
        print(f"      ‚Ä¢ Diversidad por uniones regionales")
        print(f"      ‚Ä¢ Cardinalidad promedio de conjuntos")
        print(f"      ‚Ä¢ Detecci√≥n de conjuntos singleton")
        
        # Mostrar algunos datos espec√≠ficos del puzzle generado
        print(f"\nüìã DATOS ESPEC√çFICOS DE ESTE PUZZLE:")
        empty_count = sum(row.count(0) for row in puzzle)
        print(f"      ‚Ä¢ V√©rtices en grafo: {empty_count} (celdas vac√≠as)")
        print(f"      ‚Ä¢ Aristas m√°ximas: {empty_count * 20} (restricciones)")
        print(f"      ‚Ä¢ Grupos sim√©tricos: 9 bloques √ó S‚ÇÉ = 54 permutaciones")
        print(f"      ‚Ä¢ Operaciones de conjunto: {empty_count * (empty_count-1)//2} pares analizados")
        
        print(f"\n" + "-" * 60)

def mostrar_formulas_matematicas():
    """Muestra las f√≥rmulas matem√°ticas implementadas"""
    
    print(f"\n{'='*60}")
    print("F√ìRMULAS MATEM√ÅTICAS IMPLEMENTADAS")
    print(f"{'='*60}")
    
    formulas = {
        "Dificultad Final": """
        D = 0.20√óP + 0.15√óG + 0.15√óC + 0.10√óS
        donde:
        P = Permutaciones (n√∫meros + filas + columnas + bloques)
        G = Teor√≠a de Grafos (grado + clustering + componentes + densidad)
        C = Combinatoria (inclusi√≥n-exclusi√≥n + binomiales + entrop√≠a)
        S = Teor√≠a de Conjuntos (intersecciones + uniones + cardinalidad)
        """,
        
        "Teor√≠a de Grafos": """
        Clustering(v) = tri√°ngulos_locales / tri√°ngulos_posibles
        Densidad = |E| / (|V| √ó (|V|-1) / 2)
        Grado(v) = |{u ‚àà V : (v,u) ‚àà E}|
        """,
        
        "Inclusi√≥n-Exclusi√≥n": """
        |A ‚à™ B| = |A| + |B| - |A ‚à© B|
        Para n conjuntos: |‚ãÉA·µ¢| = Œ£|A·µ¢| - Œ£|A·µ¢‚à©A‚±º| + Œ£|A·µ¢‚à©A‚±º‚à©A‚Çñ| - ...
        """,
        
        "Coeficientes Binomiales": """
        C(n,k) = n! / (k!(n-k)!)
        Complejidad = Œ£·µ¢ Œ£‚Çñ C(candidatos_i, k) para k=1,2,3
        """,
        
        "√çndice de Jaccard": """
        J(A,B) = |A ‚à© B| / |A ‚à™ B|
        Mide similitud entre conjuntos de candidatos
        """
    }
    
    for concepto, formula in formulas.items():
        print(f"\nüìê {concepto}:")
        print(formula)

if __name__ == "__main__":
    mostrar_analisis_detallado()
    mostrar_formulas_matematicas()
    
    print(f"\n{'='*80}")
    print("‚úÖ NUEVAS FUNCIONALIDADES IMPLEMENTADAS:")
    print("   ‚Ä¢ Teor√≠a de Grafos - An√°lisis de grafo de restricciones")
    print("   ‚Ä¢ Combinatoria - Inclusi√≥n-exclusi√≥n y coeficientes binomiales")  
    print("   ‚Ä¢ Teor√≠a de Conjuntos - Operaciones y an√°lisis de candidatos")
    print("   ‚Ä¢ Sistema integrado con pesos matem√°ticamente justificados")
    print(f"{'='*80}")
